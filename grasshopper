#!/bin/bash

set -e

TESTED_DOCKER_VER="24.0.6"
REPO="grasshopper"
NAME="grasshopper"
TAG="latest"
IMAGE="${REPO}"":""${TAG}"
WORKBENCH="/root/workbench"

usage() {
  printf "Usage: %s [OPTIONS]\n" "${0}"
  printf "OPTIONS:\n"
  printf "  -b    Rebuild the container before running (don't do this)\n"
  printf "  -h    Print this usage message and exit\n"
  printf "  -k    Kill any containers that exist before running\n"
  printf "\n\n"
  printf "Grasshopper is intended to be a temporary workbench for solving\n"
  printf "CTF challenges. The 'workbench' is host volume mounted so you can\n"
  printf "copy files from your host into it and interact with them from the\n"
  printf "container and vice versa. This is your starting point when executing\n"
  printf "the container. This directory can be moved or deleted or cleaned out\n"
  printf "(such as moving the challenges you worked on after a CTF out of it)\n"
  printf "without any issues. Grasshopper includes several tools, but here are\n"
  printf "some of the highlights:\n"
  printf "  - angr\n"
  printf "  - binwalk\n"
  printf "  - gdb with gef\n"
  printf "  - hashcat\n"
  printf "  - nmap\n"
  printf "  - radare2 tool suite\n"
  printf "  - SecLists wordlists (found under /data/wordlists)\n"
  printf "  - pwntools\n"
  printf "  - python3\n"
  printf "  - qemu user emulation binaries\n"
  printf "  - strace\n"
  printf "  - vim/neovim with useful plugins\n"
  printf "  - much, much more!\n"

  exit 0
}

check_docker() {
  if ! type -P docker &>/dev/null; then
    printf "Docker not installed or not in path!\n"
    printf "Nothing we can do!\n"
    printf "Exiting!\n"

    exit 1
  fi

  DOCKER_VER="$(docker --version)"
  FOUND_VER=0
  for VER in "${TESTED_DOCKER_VER}"; do
    if [[ "${DOCKER_VER}" == *"${VER}"* ]]; then
      FOUND_VER=1
    fi
  done

  if [[ ! "${FOUND_VER}" ]]; then
    printf "You are running on an untested version of docker!\n"
    printf "This might be fine, but if you encounter errors with\n"
    printf "building or running the image, please try to use a tested\n"
    printf "version of Docker before filing a bug!\n"
  fi
}

check_repo() {
  REPOS="$(docker image ls --format '{{json .Repository}}')"

  if [[ "${REPOS}" == *"${REPO}"* ]] && [[ ! -z "${REPOS}" ]]; then
    FOUND_REPO=1
  else
    FOUND_REPO=0
  fi
}

check_image() {
  IMAGES="$(docker container ls --format '{{json .Image}}')"

  if [[ "${IMAGES}" == *"${IMAGE}"* ]] && [[ ! -z "${IMAGES}" ]]; then
    FOUND_IMAGE=1
  else
    FOUND_IMAGE=0
  fi
}

check_name() {
  NAMES="$(docker container ls --format '{{json .Names}}')"

  if [[ "${NAMES}" == *"${NAME}"* ]] && [[ ! -z "${NAMES}" ]]; then
    FOUND_NAME=1
  else
    FOUND_NAME=0
  fi
}

docker_exec() {
  docker exec -it "${NAME}" /bin/bash
}

docker_kill() {
  docker kill "${NAME}" || :
}

docker_build() {
  docker_kill
  docker build --build-arg HOME="/root" -t "${IMAGE}" .
}

docker_run() {
  LOCAL_WORKBENCH="$(pwd)""/workbench"

  if [ ! -d "${LOCAL_WORKBENCH}" ]; then
    mkdir "${LOCAL_WORKBENCH}" || exit 1 # Probably a perms issue...
  fi

  docker run\
    --network=host\
    -v "${LOCAL_WORKBENCH}":"${WORKBENCH}"\
    -e LANG="en_US.UTF-8"\
    --rm\
    -d\
    -i\
    -t\
    --hostname "grasshopper"\
    --name "grasshopper"\
    "${IMAGE}"
}

main() {
  check_docker
  
  check_repo
  if [[ "${FOUND_REPO}" == "0" ]] || [[ "${@}" == *"-b"* ]]; then
    printf "Building a new image!\n"
    printf "This is going to take some time...\n"
    printf "Grab a coffee or a smoke and relax...\n"

    docker_build
  fi
  
  check_image
  check_name
  if [[ "${FOUND_IMAGE}" == "1" ]] || [[ "${FOUND_NAME}" == "1" ]]; then
    if [[ "${@}" == *"-k"* ]]; then
      docker_kill
      docker_run
    fi

    docker_exec
  else
    docker_run
    docker_exec
  fi
}

if [[ "${@}" == *"-h"* ]]; then
  usage
fi

main "${@}"
